{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,EC0BA,AArBA,SAAS,EAAQ,CAAI,EACnB,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAsB,EAAK,QAAQ,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAEzC,GAAI,AAA2B,IAA3B,EAAgB,MAAM,EAI1B,GAAI,AAA2B,IAA3B,EAAgB,MAAM,CAAQ,CAChC,IAAM,EAAO,SAAS,aAAa,CAAC,QAC9B,EAAS,EAAK,UAAU,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAElD,CAAA,EAAK,WAAW,CAAG,EACnB,EAAK,OAAO,CAAC,GACb,EAAK,UAAU,CAAC,EAAE,CAAC,MAAM,EAC3B,CAEK,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAQ,E,C,C,M,E,CADL,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,EAGP,EAtBW,SAAS,aAAa,CAAC,UA2BlC,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EACE,IAAM,EAAS,EAAE,MAAM,CAAC,OAAO,CAAC,QAEhC,GAAK,GAIL,IAAM,EAAO,EAAO,WAAW,CAE3B,EAAK,YAAY,CAAC,UACpB,EAAK,eAAe,CAAC,UAErB,EAAK,YAAY,CAAC,SAAU,QAEhC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar ul = document.querySelector(\".tree\");\n// We create a span in li that contains a list\nfunction addSpan(elem) {\n    var elementChildren = _to_consumable_array(elem.children);\n    if (elementChildren.length === 0) return;\n    if (elementChildren.length === 1) {\n        var span = document.createElement(\"span\");\n        var textLi = elem.childNodes[0].textContent.trim();\n        span.textContent = textLi;\n        elem.prepend(span);\n        elem.childNodes[1].remove();\n    }\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = elementChildren[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var el = _step.value;\n            addSpan(el);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\naddSpan(ul);\n// We hide ul when clicking on span\ndocument.addEventListener(\"click\", function(e) {\n    var target = e.target.closest(\"span\");\n    if (!target) return;\n    var list = target.nextSibling;\n    if (list.hasAttribute(\"hidden\")) list.removeAttribute(\"hidden\");\n    else list.setAttribute(\"hidden\", \"true\");\n});\n\n//# sourceMappingURL=index.4c24810a.js.map\n","'use strict';\n\nconst ul = document.querySelector('.tree');\n\n// We create a span in li that contains a list\nfunction addSpan(elem) {\n  const elementChildren = [...elem.children];\n\n  if (elementChildren.length === 0) {\n    return;\n  }\n\n  if (elementChildren.length === 1) {\n    const span = document.createElement('span');\n    const textLi = elem.childNodes[0].textContent.trim();\n\n    span.textContent = textLi;\n    elem.prepend(span);\n    elem.childNodes[1].remove();\n  }\n\n  for (const el of elementChildren) {\n    addSpan(el);\n  }\n}\n\naddSpan(ul);\n\n// We hide ul when clicking on span\ndocument.addEventListener('click', (e) => {\n  const target = e.target.closest('span');\n\n  if (!target) {\n    return;\n  }\n\n  const list = target.nextSibling;\n\n  if (list.hasAttribute('hidden')) {\n    list.removeAttribute('hidden');\n  } else {\n    list.setAttribute('hidden', 'true');\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","addSpan","elem","elementChildren","_array_without_holes","isArray","children","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","span","document","createElement","textLi","childNodes","textContent","trim","prepend","remove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","el","value","err","return","querySelector","addEventListener","e","target","closest","list","nextSibling","hasAttribute","removeAttribute","setAttribute"],"version":3,"file":"index.4c24810a.js.map"}